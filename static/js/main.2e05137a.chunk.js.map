{"version":3,"sources":["api/utils.js","reducer/dataReducer.js","reducer/rootReducer.js","store.js","component/CustomFilter.js","api/constants.js","component/DataTable.js","action/dataAction.js","API.js","container/AppContainer.js","App.js","index.js"],"names":["sortData","data","sort","a","b","Date","updated_at","formatDate","date","nDate","day","getDate","month","getMonth","getFullYear","getNow","getHours","getMinutes","getSeconds","rootReducer","combineReducers","dataReducer","state","filterValue","requestData","action","type","newRequestData","payload","newState","nData","dataItem","finalData","filter","request","id","status","map","item","store","createStore","CustomFilter","onSelectChange","e","props","target","value","filters","this","filterList","filterName","i","key","className","onChange","React","Component","colorCode","Pending","Approved","Denied","StatusContent","excludeStatus","listItems","onClick","onStatusUpdate","DataTable","getColor","keys","heading","tableHeading","style","width","requestDataList","color","backgroundColor","title","Tooltip","arrow","placement","interactive","created_at","onDelete","fetchDataAction","dispatch","param","async","Promise","resolve","reject","setTimeout","mockRequests","then","response","fetchReqData","setFilterAction","setFilter","deleteDataAction","deleteData","updateStatusAction","updateStatusData","AppContainer","filterData","updateStatus","getData","connect","r_data","localeCompare","App","ReactDOM","render","theStore","document","getElementById"],"mappings":"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","file":"static/js/main.2e05137a.chunk.js","sourcesContent":["export function sortData(data){\n    data.sort(function(a,b){\n        return new Date(b.updated_at) - new Date(a.updated_at);\n    });\n    return data;\n}\n\nexport function formatDate(date) {\n        let nDate = new Date(date);\n        let day = nDate.getDate();\n        if (day < 10) {\n            day = \"0\" + day;\n        }\n        let month = nDate.getMonth() + 1;\n        if (month < 10) {\n            month = \"0\" + month;\n        }\n        let year = nDate.getFullYear();\n        return year + \"-\" + month + \"-\" + day;\n}\n\nexport function getNow() {\n    let nDate = new Date();\n    let dateTime =  nDate.getFullYear() + \"-\"\n        + (nDate.getMonth()+1)  + \"-\"\n        + nDate.getDate() + \" \"\n        + nDate.getHours() + \":\"\n        + nDate.getMinutes() + \":\"\n        + nDate.getSeconds();\n    return dateTime;\n}\n","import {getNow} from \"../api/utils\";\n\nexport default (state={filterValue:'All', requestData:[]},action) => {\n\n    if (action.type === \"setData\") {\n        let newRequestData = action.payload.requestData;\n        let newState = {...state, requestData:newRequestData}\n        return newState\n    }\n    else if(action.type === \"filterData\") {\n        return {...state, filterValue:action.payload.filterValue};\n    }\n    else if(action.type === \"deleteData\") {\n        let nData = state.requestData;\n        let dataItem = action.payload.dataItem;\n        let finalData = nData.filter(request => dataItem.id !== request.id);\n        let newState = {...state, requestData:finalData};\n        return newState;\n    }else if(action.type === 'updateStatus'){\n        let dataItem = action.payload.dataItem;\n        let status = action.payload.status;\n        let nData = state.requestData;\n        let finalData = nData.map((item) => {\n            if(item.id === dataItem.id){\n                item.status = status;\n                item.updated_at = getNow();\n            }\n            return item;\n        });\n        let newState = {...state, requestData:finalData}\n        return newState;\n    }\n\n    return state;\n}","import { combineReducers } from 'redux';\nimport dataReducer from './dataReducer';\n\nconst rootReducer = combineReducers({\n    dataReducer:dataReducer\n});\n\nexport default rootReducer;\n\n","import { createStore } from 'redux'\nimport rootReducer from '../src/reducer/rootReducer';\n\nconst store = createStore(rootReducer);\nexport default store;","import React from 'react';\nimport PropTypes from \"prop-types\"\nimport './CustomFilter.css';\n\nclass CustomFilter extends React.Component{\n    onSelectChange = (e) => {\n        this.props.onSelectChange(e.target.value);\n    };\n\n    render(){\n        let props = this.props;\n        let filterList = props.filterList;\n\n        let filters = filterList.map((filterName,i) =>\n            <option key={i} value={filterName}>{filterName}</option>\n        );\n\n        return(\n            <select className='SelectFilter'\n                    onChange={this.onSelectChange}>\n                <option value='All'>All</option>\n                {filters}\n            </select>\n        );\n    }\n}\n\nCustomFilter.propTypes = {\n    filterList : PropTypes.array,\n    onSelectChange: PropTypes.func\n};\n\nexport default CustomFilter;","export const colorCode = {\n    Pending: '#F3F5D9',\n    Approved: '#C5F8A8',\n    Denied: '#D4C5C2'\n}\n\nexport const DEFAULT_COLOR = '#F4F9F7';","import React from 'react';\nimport PropTypes from \"prop-types\"\nimport Tooltip from '@material-ui/core/Tooltip';\nimport './DataTable.css';\n\nimport { formatDate } from '../../src/api/utils';\nimport {colorCode,DEFAULT_COLOR} from '../../src/api/constants';\n\nconst StatusContent = (props) => {\n    let dataItem = props.dataItem;\n    let excludeStatus = dataItem.status;\n    let list = props.filterList;\n\n    let nList = list.filter(item => item !== excludeStatus);\n\n    let listItems = nList.map((item,i) => <div key={i} onClick={() => props.onStatusUpdate(dataItem,item)}>{item}</div>);\n    return (\n        <div className='StatusTooltip'>\n            {listItems}\n        </div>\n    )\n};\n\nclass DataTable extends React.Component{\n    getColor = (status) => {\n        if(status in colorCode){\n            return colorCode[status];\n        }\n        return DEFAULT_COLOR;\n    };\n\n    render() {\n        let props = this.props;\n        let keys = props.heading;\n        let requestData = props.requestData;\n        let filterList = props.filterList;\n        let onStatusUpdate = props.onStatusUpdate;\n\n        let tableHeading = keys.map((key, i) => {\n            return <th style={{width:20}} key={i}>{key}</th>\n        });\n\n        let requestDataList = requestData.map((data, i) => {\n            let color = this.getColor(data.status);\n            return (\n                <tr key={i} style={{backgroundColor:color}}>\n                    <td id='td'>{data.title}</td>\n                    <td id='td'>\n                        <u>\n                            <Tooltip arrow placement=\"left\" interactive\n                                title={<StatusContent filterList={filterList}\n                                                      dataItem={data}\n                                                      onStatusUpdate={onStatusUpdate}/>}>\n                                <div>{data.status}</div>\n                            </Tooltip>\n                        </u>\n                    </td>\n                    <td id='td'>{formatDate(data.created_at)}</td>\n                    <td id='td'>{formatDate(data.updated_at)}</td>\n                    <td id='td'><u onClick={() => {props.onDelete(data)}}>Delete</u></td>\n                </tr>\n            );\n        });\n\n        return (\n            <div>\n                <table>\n                    <tbody>\n                        <tr className='headingRow'>{tableHeading}</tr>\n                        {requestDataList}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n\nDataTable.propTypes = {\n    heading: PropTypes.array,\n    requestData: PropTypes.array,\n    onDelete: PropTypes.func,\n    filterList: PropTypes.array,\n    onStatusUpdate: PropTypes.func\n};\n\nexport default DataTable;","import {getRequests} from \"../API\";\nimport {sortData} from \"../api/utils\";\n\nexport function setData(requestData){\n    return {\n        type:\"setData\",\n        payload:{\n            requestData\n        }\n    };\n}\n\nconst fetchReqData = async (dispatch, param) => {\n    await getRequests(param).then(response => {\n        response = sortData(response);\n        dispatch(setData(response))\n    })\n};\nconst fetchDataAction = (dispatch, param) => {\n    return () => fetchReqData(dispatch);\n};\nexport default fetchDataAction;\n\nconst setFilter = (dispatch, filterValue) => {\n    return dispatch({\n        type: \"filterData\",\n        payload:{\n            filterValue\n        }\n    });\n};\nexport const setFilterAction = (dispatch) => {\n    return (filterValue) => setFilter(dispatch, filterValue)\n};\n\nconst deleteData = (dispatch, dataItem) => {\n    return dispatch({\n        type: \"deleteData\",\n        payload:{\n            dataItem\n        }\n    });\n};\nexport const deleteDataAction = (dispatch) => {\n    return (dataItem) => deleteData(dispatch, dataItem)\n};\n\n\nconst updateStatusData = (dispatch, dataItem,status) => {\n    return dispatch({\n        type: \"updateStatus\",\n        payload:{\n            dataItem,\n            status\n        }\n    });\n};\nexport const updateStatusAction = (dispatch) => {\n    return (dataItem,status) => updateStatusData(dispatch, dataItem,status)\n};","import mockRequests from \"./requests.json\";\r\n\r\nexport const getRequestsSync = () => mockRequests;\r\n\r\nexport const getRequests = () =>\r\n  new Promise((resolve, reject) => {\r\n    setTimeout(() => resolve(mockRequests), 500);\r\n  });\r\n","import React,{ Component } from 'react';\nimport { connect } from 'react-redux';\nimport './appContainer.css';\n\nimport CustomFilter from '../component/CustomFilter';\nimport DataTable from '../component/DataTable';\n\nimport fetchDataAction, {setFilterAction, deleteDataAction, updateStatusAction} from \"../action/dataAction\";\nimport {sortData} from \"../api/utils\";\n\nconst filterList = [\n    'Approved',\n    'Pending',\n    'Denied'\n];\nconst heading = [\n    'Title',\n    'Status',\n    'Created',\n    'Updated',\n    'Delete'\n];\n\nclass AppContainer extends Component{\n    onSelectChange = (filterValue) => {\n        this.props.filterData(filterValue);\n    };\n\n    onDelete = (dataItem) => {\n        this.props.deleteData(dataItem);\n    };\n\n    onStatusUpdate = (dataItem,status) => {\n        this.props.updateStatus(dataItem,status);\n    };\n\n    componentDidMount() {\n        this.props.getData();\n    }\n\n    render() {\n        let requestData = this.props.requestData;\n        return (\n            <div>\n                <div className = 'RequestDiv'>Requests</div>\n                <div className='LabelDiv'>\n                    <label id='label'>Filter by Status:</label>\n                    <CustomFilter filterList = {filterList}\n                                  onSelectChange = {this.onSelectChange}/>\n                </div>\n                <div className='dataDiv'>\n                    {requestData ? <DataTable heading = {heading}\n                                              requestData = {requestData}\n                                              filterList = {filterList}\n                                              onDelete = {this.onDelete}\n                                              onStatusUpdate={this.onStatusUpdate}/> : null\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    let filterValue = state.dataReducer.filterValue;\n    let requestData = state.dataReducer.requestData;\n\n    /*Filter Data*/\n    let r_data = requestData;\n    if(filterValue !== 'All'){\n        r_data = requestData.filter(request =>\n            !(filterValue.localeCompare(request.status)));\n    }\n\n    /*Sort Data*/\n    let finalData = sortData(r_data);\n\n    /*Return Final Data*/\n    return {\n        requestData: finalData,\n        filterValue:state.dataReducer.filterValue\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        getData: fetchDataAction(dispatch),\n        filterData: setFilterAction(dispatch),\n        deleteData: deleteDataAction(dispatch),\n        updateStatus: updateStatusAction(dispatch)\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AppContainer);\n","import React from 'react';\nimport AppContainer from '../src/container/AppContainer';\n\nfunction App() {\n  return (\n    <AppContainer/>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport ReactDOM from 'react-dom';\nimport theStore from './store';\nimport App from './App';\n\nReactDOM.render(\n    <Provider store={theStore}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}